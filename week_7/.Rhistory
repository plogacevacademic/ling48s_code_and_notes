set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
grad_log_prob(mrfit$fit, upars = c("mu"=2, "cShift"=-1, "cSigma"=0, "cMu"=0.5, "glAsym"=0, "grAsym"=0, "gInvrate"=-1, "gIcpt"=-1, "rep"=0))
grad_log_prob(mrfit$fit, upars = c("mu"=qlogis(0.481451), "cShift"=log(1.08559), "cSigma"=log(0.918084), "cMu"=-0.0243488,
"glAsym"=qlogis(0.478123), "grAsym"=qlogis(0.522529), "gInvrate"=log(1.09118), "gIcpt"=log(1.09191),
"rep"=qlogis(0.488306) ))
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
mrfit$model
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2, warmup = 1, chains = 1, cores = 4, seed = 1234, init_r = .1
)
grad_log_prob(mrfit$fit, upars = c("mu"=2, "cShift"=-1, "cSigma"=0, "cMu"=0.5, "glAsym"=0, "grAsym"=0, "gInvrate"=-1, "gIcpt"=-1, "rep"=0))
grad_log_prob(mrfit$fit, upars = c("mu"=qlogis(0.481451), "cShift"=log(1.08559), "cSigma"=log(0.918084), "cMu"=-0.0243488,
"glAsym"=qlogis(0.478123), "grAsym"=qlogis(0.522529), "gInvrate"=log(1.09118), "gIcpt"=log(1.09191),
"rep"=qlogis(0.488306) ))
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2000, warmup = 1000, chains = 1, cores = 4, seed = 1234, init_r = .1
)
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2000, warmup = 1000, chains = 4, cores = 4, seed = 1234, init_r = .1
)
stan_df_experimental <- prepare_stan_data( df_experimental %>% subset(subject == "S[3]" & !interpretation %in% c("genitive","dative") ) )
stan_df_experimental$df %<>% left_join( df_contrasts )
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cShift", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cSigma", prior = "normal(0, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "cMu",    prior = "normal(0.5, .5)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2000, warmup = 1000, chains = 4, cores = 4, seed = 1234, init_r = .1
)
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
source('~/Academia/MyDraftsCurrent/hierarchical_satf_analysis/scripts/customdist.r')
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cIcpt",    prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt",    prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2000, warmup = 1000, chains = 4, cores = 4, seed = 1234, init_r = .1
)
formulaX <- bf(n_responses_per_trial ~ 1  ) + #  + c_avg_vs_gen + c_avg_vs_dat
lf(cInvrate ~ 1) +
lf(cIcpt ~ 1 ) +
lf(glAsym ~ 1 ) + #  + c_avg_vs_dat + c_avg_vs_gen
lf(grAsym ~ 1 ) +
lf(gInvrate ~ 1) +
lf(gIcpt ~ 1)
unique(stan_df_experimental$df$interpretation)
stan_df_experimental <- prepare_stan_data( df_experimental %>% subset(subject == "S[3]" & !interpretation %in% c("genitive","dative") ) )
stan_df_experimental$df %<>% left_join( df_contrasts )
# divergent transitions in subjects: 1, 2, 3(lots), 5, 22, / no div. trans.: 4, 6, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26
mrfit <- brm(formulaX + formula_rep,
prior = c( set_prior(class = "Intercept", prior = "normal(2, 1)"), # normal(2, 1) # constant(2.5)
set_prior(dpar = "cInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1.96)
set_prior(dpar = "cIcpt",    prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) #constant(-.55)
set_prior(dpar = "glAsym", prior = "normal(0, 1)", class = "Intercept"), # normal(0, 1)" # constant(.25)
set_prior(dpar = "grAsym", prior = "normal(0, 1)", class = "Intercept"), # "normal(0, 1)" # constant(-0.22)
set_prior(dpar = "gInvrate", prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "gIcpt",    prior = "normal(-1, .75)", class = "Intercept"), # normal(-1, .75) # constant(-1)
set_prior(dpar = "rep", prior = "normal(0, 1)", class = "Intercept") ), # normal(0, 1) # constant(2.6)
data = stan_df_experimental$df,
#control = list(adapt_delta = .99),
stanvars = stan_funs_base + stan_df_experimental$stan,
#save_pars = save_pars(all = TRUE),
family = mrsat_trials,
iter = 2000, warmup = 1000, chains = 4, cores = 4, seed = 1234, init_r = .1
)
mrfit$model
grad_log_prob(mrfit$fit, upars = c("mu"=2, "cShift"=-1, "cSigma"=0, "cMu"=0.5, "glAsym"=0, "grAsym"=0, "gInvrate"=-1, "gIcpt"=-1, "rep"=0))
grad_log_prob(mrfit$fit, upars = c("mu"=qlogis(0.481451), "cShift"=log(1.08559), "cSigma"=log(0.918084), "cMu"=-0.0243488,
"glAsym"=qlogis(0.478123), "grAsym"=qlogis(0.522529), "gInvrate"=log(1.09118), "gIcpt"=log(1.09191),
"rep"=qlogis(0.488306) ))
df <- stan_df_experimental$df
sdf <- stan_df_experimental$stan
i = 1
x = -1
l <- c(NA, NA)
loglik <- function(x) {
for (i in 1:2) {
l[i] <- mrsat_trials_lpmf(n_responses = df$n_responses_per_trial[i],
cAsym = plogis(2.5), cInvrate = exp(x), cIcpt = exp(-.55),
glAsym = plogis(0), grAsym = plogis(0), gInvrate = exp(-1), gIcpt = exp(-1),
p_rep = plogis(2.6),
n_trials = 1, #sdf$n_trials$sdata[i],
is_grammatical = sdf$is_grammatical$sdata[i],
time = sdf$time$sdata[i,],
responses = sdf$responses$sdata[i,],
possibly_complete = sdf$possibly_complete$sdata[i,])
}
sum(l)
}
plot(function(x) sapply(x, function(x) loglik(x)  ), xlim = xlim, main = "likelihood")
setwd("~/Academia/Courses/LING_48S/code/week_7")
a = 60
b = 2
sigma = 2
# simulation parameter
n = 100
a = 60
b = 2
sigma = 2
# simulation parameter
n = 100
x <- runif(n = n, min = 1, max = 10)
x
yhat <- a + b*x
plot(x, yhat)
y <- rnorm(n = n, mean = yhat, sd = sigma)
plot(x, y)
monkeys_likelihood_single <- function(x, y, a, b, sigma) {
# how likely is y, given x and the parameters?
yhat <- a + b*x
dnorm(y, mean = yhat, sd = sigma)
}
plot(dnorm)
plot(dnorm, xlim = c(-5, 5))
# test likelihood function on one data point
monkeys_likelihood_single(x[1], y[1], a=59, b=1.5, sigma=1.9)
monkeys_likelihood_single(x[1], y[1], a=60, b=2, sigma=2)
monkeys_likelihood_single(x[1], y[1], a=60, b=1.5, sigma=2)
x
x[1]
monkeys_likelihood_single(x[1], y[1], a=60, b=1.9, sigma=2)
# test likelihood function on one data point
monkeys_likelihood_single(x[1], y[1], a=59, b=1.5, sigma=1.9)
monkeys_likelihood_single(x[1], y[1], a=60, b=1.5, sigma=2)
monkeys_likelihood_single(x[1], y[1], a=60, b=2, sigma=2)
likelihoods <- rep(NA, length(x))
for (i in 1:length(x)) {
likelihoods[i] <- monkeys_likelihood_single(x[i], y[i], a, b, sigma)
}
likelihoods
prod(likelihoods)
monkeys_likelihood_all <- function(x, y, a, b, sigma) {
likelihoods <- rep(NA, length(x))
for (i in 1:length(x)) {
likelihoods[i] <- monkeys_likelihood_single(x[i], y[i], a, b, sigma)
}
prod(likelihoods)
}
monkeys_likelihood_all(x = x, y = y, a = 60, b = 2, sigma = 2)
# plot likelihood for different values of a
f <- function(a) {
monkeys_likelihood_all(x = x, y = y, a = a, b = 2, sigma = 2)
}
plot(f, xlim = c(50,70))
plot(function(x) sapply(x, function(x) f(x)), xlim = c(50,70))
# simulation parameter
n = 10
# food availability
x <- runif(n = n, min = 1, max = 10)
# generate data
yhat <- a + b*x
y <- rnorm(n = n, mean = yhat, sd = sigma)
plot(x, yhat)
plot(x, y)
# plot likelihood for different values of a
f <- function(a) {
monkeys_likelihood_all(x = x, y = y, a = a, b = 2, sigma = 2)
}
plot(function(x) sapply(x, function(x) f(x)), xlim = c(50,70))
# simulation parameter
n = 2
# food availability
x <- runif(n = n, min = 1, max = 10)
# generate data
yhat <- a + b*x
y <- rnorm(n = n, mean = yhat, sd = sigma)
plot(x, yhat)
plot(x, y)
# plot likelihood for different values of a
f <- function(a) {
monkeys_likelihood_all(x = x, y = y, a = a, b = 2, sigma = 2)
}
plot(function(x) sapply(x, function(x) f(x)), xlim = c(50,70))
# simulation parameter
n = 20
# food availability
x <- runif(n = n, min = 1, max = 10)
# generate data
yhat <- a + b*x
y <- rnorm(n = n, mean = yhat, sd = sigma)
plot(x, yhat)
plot(x, y)
# write a cool likelihood function
monkeys_likelihood_single <- function(x, y, a, b, sigma) {
# how likely is y, given x and the parameters?
yhat <- a + b*x
dnorm(y, mean = yhat, sd = sigma)
}
# test likelihood function on one data point
monkeys_likelihood_single(x[1], y[1], a=59, b=1.5, sigma=1.9)
monkeys_likelihood_single(x[1], y[1], a=60, b=1.5, sigma=2)
monkeys_likelihood_single(x[1], y[1], a=60, b=2, sigma=2)
monkeys_likelihood_all <- function(x, y, a, b, sigma) {
likelihoods <- rep(NA, length(x))
for (i in 1:length(x)) {
likelihoods[i] <- monkeys_likelihood_single(x[i], y[i], a, b, sigma)
}
prod(likelihoods)
}
monkeys_likelihood_all(x = x, y = y, a = 60, b = 2, sigma = 2)
# plot likelihood for different values of a
f <- function(a) {
monkeys_likelihood_all(x = x, y = y, a = a, b = 2, sigma = 2)
}
plot(function(x) sapply(x, function(x) f(x)), xlim = c(50,70))
?optim
# use optim to find the the parameters with the highest likelihood
monkeys_likelihood_for_optim <- function(par) {
monkeys_likelihood(x = x, y = y, a = par["a"], b = par["b"], sigma = par["sigma"])
}
monkeys_likelihood_for_optim(c(a=60,b=2,sigma=2))
# use optim to find the the parameters with the highest likelihood
monkeys_likelihood_for_optim <- function(par) {
monkeys_likelihood_all(x = x, y = y, a = par["a"], b = par["b"], sigma = par["sigma"])
}
monkeys_likelihood_for_optim(c(a=60,b=2,sigma=2))
start_par <- c(a=60, b=2, sigma=2)
optim(start_par, monkeys_likelihood_for_optim, control = list(fnscale = -1))
# use optim to find the the parameters with the highest likelihood
monkeys_likelihood_for_optim <- function(par) {
lik <- monkeys_likelihood_all(x = x, y = y, a = par["a"], b = par["b"], sigma = par["sigma"])
print(lik)
lik
}
start_par <- c(a=60, b=2, sigma=2)
optim(start_par, monkeys_likelihood_for_optim, control = list(fnscale = -1))
start_par <- c(a=59, b=1.5, sigma=3)
optim(start_par, monkeys_likelihood_for_optim, control = list(fnscale = -1))
start_par <- c(a=40, b=0.5, sigma=30)
optim(start_par, monkeys_likelihood_for_optim, control = list(fnscale = -1))
monkeys_log_likelihood_single <- function(x, y, a, b, sigma) {
# how likely is y, given x and the parameters?
yhat <- a + b*x
dnorm(y, mean = yhat, sd = sigma, log = T)
}
# test likelihood function on one data point
monkeys_log_likelihood_single(x[1], y[1], a=59, b=1.5, sigma=1.9)
monkeys_log_likelihood_single(x[1], y[1], a=60, b=1.5, sigma=2)
monkeys_log_likelihood_single(x[1], y[1], a=60, b=2, sigma=2)
exp(-4)
exp(-2)
monkeys_log_likelihood_all <- function(x, y, a, b, sigma) {
log_likelihoods <- rep(NA, length(x))
for (i in 1:length(x)) {
log_likelihoods[i] <- monkeys_log_likelihood_single(x[i], y[i], a, b, sigma)
}
sum(log_likelihoods)
}
monkeys_log_likelihood_all(x = x, y = y, a = 60, b = 2, sigma = 2)
exp(-39)
# plot likelihood for different values of a
f <- function(a) {
monkeys_log_likelihood_all(x = x, y = y, a = a, b = 2, sigma = 2)
}
plot(function(x) sapply(x, function(x) f(x)), xlim = c(50,70))
# use optim to find the the parameters with the highest likelihood
monkeys_log_likelihood_for_optim <- function(par) {
log_lik <- monkeys_log_likelihood_all(x = x, y = y, a = par["a"], b = par["b"], sigma = par["sigma"])
print(log_lik)
log_lik
}
start_par <- c(a=40, b=0.5, sigma=30)
optim(start_par, monkeys_likelihood_for_optim, control = list(fnscale = -1))
optim(start_par, monkeys_log_likelihood_for_optim, control = list(fnscale = -1))
optim_result <- optim(start_par, monkeys_log_likelihood_for_optim, control = list(fnscale = -1))
optim_result
# plot likelihood for different values of b
f2 <- function(sigma) {
monkeys_log_likelihood_all(x = x, y = y, a = 60, b = 2, sigma = sigma)
}
plot(f2, xlim = c(0.5,5))
plot(function(x) sapply(x, function(x) f(x)), xlim = c(0.5,5))
plot(function(x) sapply(x, function(x) f2(x)), xlim = c(0.5,5))
plot(function(x) sapply(x, function(x) exp(f2(x)) ), xlim = c(0.5,5))
# simulation parameter
n = 100
# food availability
x <- runif(n = n, min = 1, max = 10)
# generate data
yhat <- a + b*x
y <- rnorm(n = n, mean = yhat, sd = sigma)
plot(x, yhat)
plot(x, y)
optim_result <- optim(start_par, monkeys_log_likelihood_for_optim, control = list(fnscale = -1))
optim_result
# simulation settings
n = 100
?sample
sample(1:100, 1)
sample(1:100, 1)
# simulate word lengths
wlens <- sample(1:15, size = n, replace = T)
wlens
b = -.005
a + b*wlens
n = 100
a = 0
b = -.005
a + b*wlens
a = 10^4
a + b*wlens
a = 100
b = -.005
a + b*wlens
b = -15
a + b*wlens
b = -.15
a + b*wlens
b = -7
a + b*wlens
b*15
b = -3
(b*15)/100
b = -3
a + b*wlens
(freq = a + b*wlens)
sum(freq)
a = 10
(b*15)/a
b = -.3
(b*15)/a
(freq = a + b*wlens)
sum(freq)
a = 1
b = -.03
(b*15)/a
(freq = a + b*wlens)
sum(freq)
1/11
1/101
a = 0
b = -1
log_odds_freq = a + b*wlens
(log_odds_freq = a + b*wlens)
plot(wlens, log_odds_freq)
perc_freq = plogis(log_odds_freq)
plot(wlens, perc_freq)
n_corpus = 10^6
rbinom(n = 1, size = n_corpus, prob = .1)
rbinom(n = 1, size = 10, prob = .1)
rbinom(n = 1, size = 100, prob = .1)
rbinom(n = 1, size = 100, prob = .1)
rbinom(n = 1, size = n_corpus, prob = .1)
rbinom(n = 1, size = n_corpus, prob = perc_freq)
n_obs <- rbinom(n = 1, size = n_corpus, prob = perc_freq)
n_obs
perc_freq
n_obs <- rep(NA, n)
for(i in 1:n) {
n_obs[i] <- rbinom(n = 1, size = n_corpus, prob = perc_freq[i])
}
plot(perc_freq, n_obs)
plot(wlens, perc_freq)sum(freq)
plot(wlens, perc_freq)
n_obs <- rep(NA, n)
for(i in 1:n) {
n_obs[i] <- rbinom(n = 1, size = n_corpus, prob = perc_freq[i])
}
plot(perc_freq, n_obs)
